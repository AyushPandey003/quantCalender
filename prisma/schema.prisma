// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Authentication
  passwordHash String
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?

  // User preferences
  settings UserSettings?
  
  // User data
  watchlists Watchlist[]
  alerts     PriceAlert[]
  sessions   UserSession[]
  apiKeys    ApiKey[]

  @@map("users")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Theme preferences
  theme          String  @default("system")
  colorScheme    String  @default("default")
  fontSize       String  @default("medium")
  reducedMotion  Boolean @default(false)
  highContrast   Boolean @default(false)

  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  soundEnabled       Boolean @default(true)
  notificationVolume Int     @default(75)

  // Data preferences
  defaultTimeframe   String @default("1D")
  defaultMetric      String @default("volatility")
  cacheSize          Int    @default(500)
  dataRetention      Int    @default(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sessionToken String   @unique
  device       String?
  browser      String?
  os           String?
  ipAddress    String?
  location     String?
  
  createdAt    DateTime @default(now())
  lastActive   DateTime @default(now())
  expiresAt    DateTime

  @@map("user_sessions")
}

model ApiKey {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  keyHash     String   @unique
  lastUsed    DateTime?
  permissions Json     @default("{}")
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@map("api_keys")
}

// Market Data Models
model Symbol {
  id          String @id @default(cuid())
  symbol      String @unique // BTCUSDT, ETHUSDT, etc.
  name        String         // Bitcoin, Ethereum, etc.
  slug        String @unique // bitcoin, ethereum (for external APIs)
  category    String         // cryptocurrency, forex, stock
  isActive    Boolean @default(true)
  
  // Metadata
  metadata    Json    @default("{}")
  
  // Relations
  marketData  MarketData[]
  watchlists  WatchlistItem[]
  alerts      PriceAlert[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("symbols")
}

model MarketData {
  id       String @id @default(cuid())
  symbolId String
  symbol   Symbol @relation(fields: [symbolId], references: [id], onDelete: Cascade)

  // Time data
  timestamp DateTime
  date      DateTime // Date only for daily aggregations

  // OHLCV data
  open   Decimal @db.Decimal(20, 8)
  high   Decimal @db.Decimal(20, 8)
  low    Decimal @db.Decimal(20, 8)
  close  Decimal @db.Decimal(20, 8)
  volume Decimal @db.Decimal(20, 8)

  // Calculated metrics
  volatility  Decimal? @db.Decimal(10, 4)
  liquidity   Decimal? @db.Decimal(20, 8)
  performance Decimal? @db.Decimal(10, 4)

  // Technical indicators
  sma20       Decimal? @db.Decimal(20, 8)
  sma50       Decimal? @db.Decimal(20, 8)
  rsi         Decimal? @db.Decimal(5, 2)
  macd        Decimal? @db.Decimal(20, 8)

  // Metadata
  source      String   @default("api")
  timeframe   String   // 1m, 5m, 1h, 1d, etc.

  createdAt DateTime @default(now())

  @@unique([symbolId, timestamp, timeframe])
  @@index([symbolId, date])
  @@index([timestamp])
  @@index([date])
  @@map("market_data")
}

// User Features
model Watchlist {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  description String?
  isDefault   Boolean @default(false)
  color       String  @default("#3b82f6")

  items WatchlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("watchlists")
}

model WatchlistItem {
  id          String    @id @default(cuid())
  watchlistId String
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  symbolId    String
  symbol      Symbol    @relation(fields: [symbolId], references: [id], onDelete: Cascade)

  order     Int     @default(0)
  notes     String?
  addedAt   DateTime @default(now())

  @@unique([watchlistId, symbolId])
  @@map("watchlist_items")
}

model PriceAlert {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbolId String
  symbol   Symbol @relation(fields: [symbolId], references: [id], onDelete: Cascade)

  name        String
  alertType   AlertType
  condition   AlertCondition
  targetValue Decimal       @db.Decimal(20, 8)
  
  isActive    Boolean @default(true)
  isTriggered Boolean @default(false)
  triggeredAt DateTime?
  
  // Notification settings
  emailNotification Boolean @default(true)
  pushNotification  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("price_alerts")
}

// Enums
enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum AlertType {
  PRICE
  VOLUME
  VOLATILITY
  PERCENTAGE_CHANGE
}

enum AlertCondition {
  ABOVE
  BELOW
  CROSSES_ABOVE
  CROSSES_BELOW
}
